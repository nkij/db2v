{"version":3,"sources":["../../../../../src/start/server/metro/withMetroMultiPlatform.ts"],"sourcesContent":["/**\n * Copyright Â© 2022 650 Industries.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport chalk from 'chalk';\nimport fs from 'fs';\nimport { ConfigT } from 'metro-config';\nimport { Resolution, ResolutionContext } from 'metro-resolver';\nimport path from 'path';\nimport resolveFrom from 'resolve-from';\n\nimport {\n  EXTERNAL_REQUIRE_NATIVE_POLYFILL,\n  EXTERNAL_REQUIRE_POLYFILL,\n  getNodeExternalModuleId,\n  isNodeExternal,\n  setupNodeExternals,\n} from './externals';\nimport { isFailedToResolveNameError, isFailedToResolvePathError } from './metroErrors';\nimport { importMetroResolverFromProject } from './resolveFromProject';\nimport { getAppRouterRelativeEntryPath } from './router';\nimport { withMetroResolvers } from './withMetroResolvers';\nimport { Log } from '../../../log';\nimport { FileNotifier } from '../../../utils/FileNotifier';\nimport { env } from '../../../utils/env';\nimport { installExitHooks } from '../../../utils/exit';\nimport { isInteractive } from '../../../utils/interactive';\nimport { learnMore } from '../../../utils/link';\nimport { loadTsConfigPathsAsync, TsConfigPaths } from '../../../utils/tsconfig/loadTsConfigPaths';\nimport { resolveWithTsConfigPaths } from '../../../utils/tsconfig/resolveWithTsConfigPaths';\nimport { WebSupportProjectPrerequisite } from '../../doctor/web/WebSupportProjectPrerequisite';\nimport { PlatformBundlers } from '../platformBundlers';\n\ntype Mutable<T> = { -readonly [K in keyof T]: T[K] };\n\nconst debug = require('debug')('expo:start:server:metro:multi-platform') as typeof console.log;\n\nfunction withWebPolyfills(config: ConfigT, projectRoot: string): ConfigT {\n  const originalGetPolyfills = config.serializer.getPolyfills\n    ? config.serializer.getPolyfills.bind(config.serializer)\n    : () => [];\n\n  const getPolyfills = (ctx: { platform: string | null }): readonly string[] => {\n    if (ctx.platform === 'web') {\n      return [\n        // NOTE: We might need this for all platforms\n        path.join(projectRoot, EXTERNAL_REQUIRE_POLYFILL),\n        // TODO: runtime polyfills, i.e. Fast Refresh, error overlay, React Dev Tools...\n      ];\n    }\n    // Generally uses `rn-get-polyfills`\n    const polyfills = originalGetPolyfills(ctx);\n\n    return [...polyfills, EXTERNAL_REQUIRE_NATIVE_POLYFILL];\n  };\n\n  return {\n    ...config,\n    serializer: {\n      ...config.serializer,\n      getPolyfills,\n    },\n  };\n}\n\nfunction normalizeSlashes(p: string) {\n  return p.replace(/\\\\/g, '/');\n}\n\nexport function getNodejsExtensions(srcExts: readonly string[]): string[] {\n  const mjsExts = srcExts.filter((ext) => /mjs$/.test(ext));\n  const nodejsSourceExtensions = srcExts.filter((ext) => !/mjs$/.test(ext));\n  // find index of last `*.js` extension\n  const jsIndex = nodejsSourceExtensions.reduce((index, ext, i) => {\n    return /jsx?$/.test(ext) ? i : index;\n  }, -1);\n\n  // insert `*.mjs` extensions after `*.js` extensions\n  nodejsSourceExtensions.splice(jsIndex + 1, 0, ...mjsExts);\n\n  return nodejsSourceExtensions;\n}\n\n/**\n * Apply custom resolvers to do the following:\n * - Disable `.native.js` extensions on web.\n * - Alias `react-native` to `react-native-web` on web.\n * - Redirect `react-native-web/dist/modules/AssetRegistry/index.js` to `@react-native/assets/registry.js` on web.\n * - Add support for `tsconfig.json`/`jsconfig.json` aliases via `compilerOptions.paths`.\n */\nexport function withExtendedResolver(\n  config: ConfigT,\n  {\n    projectRoot,\n    tsconfig,\n    platforms,\n    isTsconfigPathsEnabled,\n  }: {\n    projectRoot: string;\n    tsconfig: TsConfigPaths | null;\n    platforms: string[];\n    isTsconfigPathsEnabled?: boolean;\n  }\n) {\n  // Get the `transformer.assetRegistryPath`\n  // this needs to be unified since you can't dynamically\n  // swap out the transformer based on platform.\n  const assetRegistryPath = fs.realpathSync(\n    // This is the native asset registry alias for native.\n    path.resolve(resolveFrom(projectRoot, 'react-native/Libraries/Image/AssetRegistry'))\n    // NOTE(EvanBacon): This is the newer import but it doesn't work in the expo/expo monorepo.\n    // path.resolve(resolveFrom(projectRoot, '@react-native/assets/registry.js'))\n  );\n\n  let reactNativeWebAppContainer: string | null = null;\n  try {\n    reactNativeWebAppContainer = fs.realpathSync(\n      // This is the native asset registry alias for native.\n      path.resolve(resolveFrom(projectRoot, 'expo-router/build/fork/react-native-web-container'))\n      // NOTE(EvanBacon): This is the newer import but it doesn't work in the expo/expo monorepo.\n      // path.resolve(resolveFrom(projectRoot, '@react-native/assets/registry.js'))\n    );\n  } catch {}\n\n  const isWebEnabled = platforms.includes('web');\n\n  const { resolve } = importMetroResolverFromProject(projectRoot);\n\n  const extraNodeModules: { [key: string]: Record<string, string> } = {};\n\n  const aliases: { [key: string]: Record<string, string> } = {\n    web: {\n      'react-native': 'react-native-web',\n      'react-native/index': 'react-native-web',\n    },\n  };\n\n  if (isWebEnabled) {\n    // Allow `react-native-web` to be optional when web is not enabled but path aliases is.\n    extraNodeModules['web'] = {\n      'react-native': path.resolve(require.resolve('react-native-web/package.json'), '..'),\n    };\n  }\n\n  const preferredMainFields: { [key: string]: string[] } = {\n    // Defaults from Expo Webpack. Most packages using `react-native` don't support web\n    // in the `react-native` field, so we should prefer the `browser` field.\n    // https://github.com/expo/router/issues/37\n    web: ['browser', 'module', 'main'],\n  };\n\n  let tsConfigResolve = tsconfig?.paths\n    ? resolveWithTsConfigPaths.bind(resolveWithTsConfigPaths, {\n        paths: tsconfig.paths ?? {},\n        baseUrl: tsconfig.baseUrl,\n      })\n    : null;\n\n  if (isTsconfigPathsEnabled && isInteractive()) {\n    // TODO: We should track all the files that used imports and invalidate them\n    // currently the user will need to save all the files that use imports to\n    // use the new aliases.\n    const configWatcher = new FileNotifier(projectRoot, ['./tsconfig.json', './jsconfig.json']);\n    configWatcher.startObserving(() => {\n      debug('Reloading tsconfig.json');\n      loadTsConfigPathsAsync(projectRoot).then((tsConfigPaths) => {\n        if (tsConfigPaths?.paths && !!Object.keys(tsConfigPaths.paths).length) {\n          debug('Enabling tsconfig.json paths support');\n          tsConfigResolve = resolveWithTsConfigPaths.bind(resolveWithTsConfigPaths, {\n            paths: tsConfigPaths.paths ?? {},\n            baseUrl: tsConfigPaths.baseUrl,\n          });\n        } else {\n          debug('Disabling tsconfig.json paths support');\n          tsConfigResolve = null;\n        }\n      });\n    });\n\n    // TODO: This probably prevents the process from exiting.\n    installExitHooks(() => {\n      configWatcher.stopObserving();\n    });\n  } else {\n    debug('Skipping tsconfig.json paths support');\n  }\n\n  let nodejsSourceExtensions: string[] | null = null;\n\n  return withMetroResolvers(config, projectRoot, [\n    // Add a resolver to alias the web asset resolver.\n    (immutableContext: ResolutionContext, moduleName: string, platform: string | null) => {\n      let context = {\n        ...immutableContext,\n      } as Mutable<ResolutionContext> & {\n        mainFields: string[];\n        customResolverOptions?: Record<string, string>;\n      };\n\n      const environment = context.customResolverOptions?.environment;\n      const isNode = environment === 'node';\n\n      // TODO: We need to prevent the require.context from including API routes as these use externals.\n      // Should be fine after async routes lands.\n      if (isNode) {\n        const moduleId = isNodeExternal(moduleName);\n        if (moduleId) {\n          moduleName = getNodeExternalModuleId(context.originModulePath, moduleId);\n          debug(`Redirecting Node.js external \"${moduleId}\" to \"${moduleName}\"`);\n        }\n\n        // Adjust nodejs source extensions to sort mjs after js, including platform variants.\n        if (nodejsSourceExtensions === null) {\n          nodejsSourceExtensions = getNodejsExtensions(context.sourceExts);\n        }\n        context.sourceExts = nodejsSourceExtensions;\n      }\n\n      // Conditionally remap `react-native` to `react-native-web` on web in\n      // a way that doesn't require Babel to resolve the alias.\n      if (platform && platform in aliases && aliases[platform][moduleName]) {\n        moduleName = aliases[platform][moduleName];\n      }\n\n      // TODO: We may be able to remove this in the future, it's doing no harm\n      // by staying here.\n      // Conditionally remap `react-native` to `react-native-web`\n      if (platform && platform in extraNodeModules) {\n        context.extraNodeModules = {\n          ...extraNodeModules[platform],\n          ...context.extraNodeModules,\n        };\n      }\n\n      if (tsconfig?.baseUrl && isTsconfigPathsEnabled) {\n        context = {\n          ...context,\n          nodeModulesPaths: [\n            ...immutableContext.nodeModulesPaths,\n            // add last to ensure node modules are resolved first\n            tsconfig.baseUrl,\n          ],\n        };\n      }\n\n      let mainFields: string[] = context.mainFields;\n\n      if (isNode) {\n        // Node.js runtimes should only be importing main at the moment.\n        // This is a temporary fix until we can support the package.json exports.\n        mainFields = ['main', 'module'];\n      } else if (env.EXPO_METRO_NO_MAIN_FIELD_OVERRIDE) {\n        mainFields = context.mainFields;\n      } else if (platform && platform in preferredMainFields) {\n        mainFields = preferredMainFields[platform];\n      }\n      function doResolve(moduleName: string): Resolution | null {\n        return resolve(\n          {\n            ...context,\n            resolveRequest: undefined,\n            mainFields,\n\n            // Passing `mainFields` directly won't be considered (in certain version of Metro)\n            // we need to extend the `getPackageMainPath` directly to\n            // use platform specific `mainFields`.\n            // @ts-ignore\n            getPackageMainPath(packageJsonPath) {\n              // @ts-expect-error: mainFields is not on type\n              const package_ = context.moduleCache.getPackage(packageJsonPath);\n              return package_.getMain(mainFields);\n            },\n          },\n          moduleName,\n          platform\n        );\n      }\n\n      function optionalResolve(moduleName: string): Resolution | null {\n        try {\n          return doResolve(moduleName);\n        } catch (error) {\n          // If the error is directly related to a resolver not being able to resolve a module, then\n          // we can ignore the error and try the next resolver. Otherwise, we should throw the error.\n          const isResolutionError =\n            isFailedToResolveNameError(error) || isFailedToResolvePathError(error);\n          if (!isResolutionError) {\n            throw error;\n          }\n        }\n        return null;\n      }\n\n      let result: Resolution | null = null;\n\n      // React Native uses `event-target-shim` incorrectly and this causes the native runtime\n      // to fail to load. This is a temporary workaround until we can fix this upstream.\n      // https://github.com/facebook/react-native/pull/38628\n      if (\n        moduleName.includes('event-target-shim') &&\n        context.originModulePath.includes(path.sep + 'react-native' + path.sep)\n      ) {\n        context.sourceExts = context.sourceExts.filter((f) => !f.includes('mjs'));\n        debug('Skip mjs support for event-target-shim in:', context.originModulePath);\n      }\n\n      if (tsConfigResolve) {\n        result = tsConfigResolve(\n          {\n            originModulePath: context.originModulePath,\n            moduleName,\n          },\n          optionalResolve\n        );\n      }\n\n      result ??= doResolve(moduleName);\n\n      if (result) {\n        // Replace the web resolver with the original one.\n        // This is basically an alias for web-only.\n        if (shouldAliasAssetRegistryForWeb(platform, result)) {\n          // @ts-expect-error: `readonly` for some reason.\n          result.filePath = assetRegistryPath;\n        }\n\n        // React Native Web adds a couple extra divs for no reason, these\n        // make static rendering much harder as we expect the root element to be `<html>`.\n        // This resolution will alias to a simple in-out component to avoid React Native web.\n        if (\n          // Only apply the transform if expo-router is present.\n          reactNativeWebAppContainer &&\n          shouldAliasModule(\n            {\n              platform,\n              result,\n            },\n            {\n              platform: 'web',\n              output: 'react-native-web/dist/exports/AppRegistry/AppContainer.js',\n            }\n          )\n        ) {\n          // @ts-expect-error: `readonly` for some reason.\n          result.filePath = reactNativeWebAppContainer;\n        }\n      }\n      return result;\n    },\n  ]);\n}\n\n/** @returns `true` if the incoming resolution should be swapped on web. */\nexport function shouldAliasAssetRegistryForWeb(\n  platform: string | null,\n  result: Resolution\n): boolean {\n  return (\n    platform === 'web' &&\n    result?.type === 'sourceFile' &&\n    typeof result?.filePath === 'string' &&\n    normalizeSlashes(result.filePath).endsWith(\n      'react-native-web/dist/modules/AssetRegistry/index.js'\n    )\n  );\n}\n/** @returns `true` if the incoming resolution should be swapped. */\nexport function shouldAliasModule(\n  input: {\n    platform: string | null;\n    result: Resolution;\n  },\n  alias: { platform: string; output: string }\n): boolean {\n  return (\n    input.platform === alias.platform &&\n    input.result?.type === 'sourceFile' &&\n    typeof input.result?.filePath === 'string' &&\n    normalizeSlashes(input.result.filePath).endsWith(alias.output)\n  );\n}\n\n/** Add support for `react-native-web` and the Web platform. */\nexport async function withMetroMultiPlatformAsync(\n  projectRoot: string,\n  {\n    config,\n    platformBundlers,\n    isTsconfigPathsEnabled,\n    webOutput,\n    routerDirectory,\n  }: {\n    config: ConfigT;\n    isTsconfigPathsEnabled: boolean;\n    platformBundlers: PlatformBundlers;\n    webOutput?: 'single' | 'static';\n    routerDirectory: string;\n  }\n) {\n  // Auto pick app entry for router.\n  process.env.EXPO_ROUTER_APP_ROOT = getAppRouterRelativeEntryPath(projectRoot, routerDirectory);\n\n  // Required for @expo/metro-runtime to format paths in the web LogBox.\n  process.env.EXPO_PUBLIC_PROJECT_ROOT = process.env.EXPO_PUBLIC_PROJECT_ROOT ?? projectRoot;\n\n  if (webOutput === 'static') {\n    // Enable static rendering in runtime space.\n    process.env.EXPO_PUBLIC_USE_STATIC = '1';\n  }\n\n  // Ensure the cache is invalidated if these values change.\n  // @ts-expect-error\n  config.transformer._expoRouterRootDirectory = process.env.EXPO_ROUTER_APP_ROOT;\n  // @ts-expect-error\n  config.transformer._expoRouterWebRendering = webOutput;\n  // TODO: import mode\n\n  if (platformBundlers.web === 'metro') {\n    await new WebSupportProjectPrerequisite(projectRoot).assertAsync();\n  }\n\n  let tsconfig: null | TsConfigPaths = null;\n\n  if (isTsconfigPathsEnabled) {\n    Log.warn(\n      chalk.yellow`Experimental path aliases feature is enabled. ` +\n        learnMore('https://docs.expo.dev/guides/typescript/#path-aliases')\n    );\n    tsconfig = await loadTsConfigPathsAsync(projectRoot);\n  }\n\n  await setupNodeExternals(projectRoot);\n\n  return withMetroMultiPlatform(projectRoot, {\n    config,\n    platformBundlers,\n    tsconfig,\n    isTsconfigPathsEnabled,\n  });\n}\n\nfunction withMetroMultiPlatform(\n  projectRoot: string,\n  {\n    config,\n    platformBundlers,\n    isTsconfigPathsEnabled,\n    tsconfig,\n  }: {\n    config: ConfigT;\n    isTsconfigPathsEnabled: boolean;\n    platformBundlers: PlatformBundlers;\n    tsconfig: TsConfigPaths | null;\n  }\n) {\n  let expoConfigPlatforms = Object.entries(platformBundlers)\n    .filter(([, bundler]) => bundler === 'metro')\n    .map(([platform]) => platform);\n\n  if (Array.isArray(config.resolver.platforms)) {\n    expoConfigPlatforms = [...new Set(expoConfigPlatforms.concat(config.resolver.platforms))];\n  }\n\n  // @ts-expect-error: typed as `readonly`.\n  config.resolver.platforms = expoConfigPlatforms;\n\n  if (expoConfigPlatforms.includes('web')) {\n    config = withWebPolyfills(config, projectRoot);\n  }\n\n  return withExtendedResolver(config, {\n    projectRoot,\n    tsconfig,\n    isTsconfigPathsEnabled,\n    platforms: expoConfigPlatforms,\n  });\n}\n"],"names":["getNodejsExtensions","withExtendedResolver","shouldAliasAssetRegistryForWeb","shouldAliasModule","withMetroMultiPlatformAsync","debug","require","withWebPolyfills","config","projectRoot","originalGetPolyfills","serializer","getPolyfills","bind","ctx","platform","path","join","EXTERNAL_REQUIRE_POLYFILL","polyfills","EXTERNAL_REQUIRE_NATIVE_POLYFILL","normalizeSlashes","p","replace","srcExts","mjsExts","filter","ext","test","nodejsSourceExtensions","jsIndex","reduce","index","i","splice","tsconfig","platforms","isTsconfigPathsEnabled","assetRegistryPath","fs","realpathSync","resolve","resolveFrom","reactNativeWebAppContainer","isWebEnabled","includes","importMetroResolverFromProject","extraNodeModules","aliases","web","preferredMainFields","tsConfigResolve","paths","resolveWithTsConfigPaths","baseUrl","isInteractive","configWatcher","FileNotifier","startObserving","loadTsConfigPathsAsync","then","tsConfigPaths","Object","keys","length","installExitHooks","stopObserving","withMetroResolvers","immutableContext","moduleName","context","environment","customResolverOptions","isNode","moduleId","isNodeExternal","getNodeExternalModuleId","originModulePath","sourceExts","nodeModulesPaths","mainFields","env","EXPO_METRO_NO_MAIN_FIELD_OVERRIDE","doResolve","resolveRequest","undefined","getPackageMainPath","packageJsonPath","package_","moduleCache","getPackage","getMain","optionalResolve","error","isResolutionError","isFailedToResolveNameError","isFailedToResolvePathError","result","sep","f","filePath","output","type","endsWith","input","alias","platformBundlers","webOutput","routerDirectory","process","EXPO_ROUTER_APP_ROOT","getAppRouterRelativeEntryPath","EXPO_PUBLIC_PROJECT_ROOT","EXPO_PUBLIC_USE_STATIC","transformer","_expoRouterRootDirectory","_expoRouterWebRendering","WebSupportProjectPrerequisite","assertAsync","Log","warn","chalk","yellow","learnMore","setupNodeExternals","withMetroMultiPlatform","expoConfigPlatforms","entries","bundler","map","Array","isArray","resolver","Set","concat"],"mappings":"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"}